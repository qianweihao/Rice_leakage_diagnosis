# 水稻漏水诊断算法

## 1. 算法概述

本算法是一个基于规则的水稻田漏水诊断系统，通过分析液位传感器数据的时间序列变化模式，自动识别异常事件和排水事件。算法不依赖机器学习模型，而是基于专家知识和物理规律制定的规则进行事件检测。

## 2. 算法原理

### 2.1 核心检测逻辑

算法主要检测两类事件：
- **异常事件 (anomaly)**：夜间时段液位异常上升，可能表示漏水或其他异常情况
- **排水事件 (drain)**：液位持续下降，表示人工排水或自然排水

### 2.2 检测规则

#### 异常事件检测
- **时间条件**：夜间时段 (22:00–05:00)
- **液位条件**：液位变化率 > 1.0 mm/h (RISE_TH)
- **物理意义**：夜间正常情况下液位应保持稳定，异常上升可能表示漏水

#### 排水事件检测
排水事件需满足以下任一条件：
1. **连续下降模式**：连续5小时液位变化率 < -0.5 mm/h
2. **累计下降模式**：连续5小时内累计液位下降 < -4.0 mm

### 2.3 多重过滤机制

为提高检测准确性，算法采用三重过滤机制：

#### 过滤器1：突变过滤
- **条件**：|起始液位 - 前5时段液位| > 5.0 mm
- **目的**：过滤由于传感器故障或数据异常导致的突变

#### 过滤器2：高点过滤
- **条件**：前1时段液位 > 起始液位 且 前1时段液位 > 前5时段液位
- **目的**：避免将液位波动误判为排水事件

#### 过滤器3：时间关联过滤
- **条件**：排水事件开始时间在异常事件结束后5小时内
- **目的**：避免将异常后的正常恢复误判为排水事件

## 3. 算法流程

### 3.1 数据预处理

1. **数据读取**：读取设备液位数据文件 (device_*.csv)
2. **时间解析**：解析msgTime字段为时间戳
3. **数据排序**：按时间戳升序排列
4. **完整性检查**：验证liquidLevel_clean字段存在性

### 3.2 数据分块处理

```
时间差分块逻辑：
- 计算相邻数据点时间差
- 时间差 > 3小时视为数据断点
- 按断点将数据分为独立块
- 每块独立进行事件检测
```

### 3.3 特征计算

对每个数据块：
1. **液位差分**：计算相邻时段液位变化 (mm/h)
2. **夜间标记**：标识夜间时段 (22:00-05:00)
3. **滚动统计**：计算5小时滚动窗口累计变化

### 3.4 事件检测

#### 异常事件检测流程
```
FOR 每个数据点:
    IF 夜间时段 AND 液位上升 > 1.0mm/h:
        标记为异常事件候选
        提取连续异常段
        记录事件起止时间
```

#### 排水事件检测流程
```
# 方法1：连续下降检测
FOR 每个数据点:
    IF 液位下降 > 0.5mm/h:
        检查连续性
        IF 连续5小时满足条件:
            标记为排水候选段

# 方法2：累计下降检测
FOR 每个5小时窗口:
    计算累计液位变化
    IF 累计下降 > 4.0mm:
        标记为排水候选段
```

### 3.5 过滤验证

对每个排水候选段：
```
# 突变过滤
IF |起始液位 - 前5时段液位| > 5.0mm:
    丢弃该候选段
    
# 高点过滤
IF 前1时段液位 > 起始液位 AND 前1时段液位 > 前5时段液位:
    丢弃该候选段
    
# 时间关联过滤
FOR 每个异常事件结束时间:
    IF 排水开始时间在异常结束后5小时内:
        丢弃该候选段
```

## 4. 关键参数

| 参数名 | 数值 | 单位 | 说明 |
|--------|------|------|------|
| RISE_TH | 1.0 | mm/h | 异常上升阈值 |
| DROP_TH | 0.5 | mm/h | 连续下降阈值 |
| DROP_SUM_TH | 4.0 | mm | 累计下降阈值 |
| DRAIN_LEN_H | 5 | 小时 | 连续检测窗口长度 |
| SPIKE_TH | 5.0 | mm | 突变过滤阈值 |
| ANOM_WINDOW | 5 | 小时 | 异常后屏蔽窗口 |
| MAX_GAP_H | 3 | 小时 | 数据断点阈值 |

## 5. 输出格式

算法输出CSV文件 (labeled_events.csv)，包含以下字段：
- **code**：设备编号
- **start**：事件开始时间
- **end**：事件结束时间  
- **label**：事件类型 ("anomaly" 或 "drain")

## 6. 算法优势

1. **规则透明**：基于物理规律和专家知识，逻辑清晰可解释
2. **实时性强**：无需训练过程，可直接应用于新数据
3. **鲁棒性好**：多重过滤机制提高检测准确性
4. **参数可调**：关键阈值可根据实际情况调整
5. **处理断点**：自动处理数据缺失和时间断点

## 7. 应用场景

- 水稻田液位监测系统
- 农业灌溉管理
- 漏水早期预警
- 排水事件记录
- 农田水位异常检测

## 8. 技术实现

- **编程语言**：Python
- **核心库**：pandas, numpy
- **输入格式**：CSV时间序列数据
- **输出格式**：CSV事件记录
- **运行环境**：标准Python环境

---

*本算法基于实际农业应用需求设计，经过多轮优化和验证，适用于水稻田漏水诊断的实际生产环境。*